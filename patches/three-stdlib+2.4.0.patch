diff --git a/node_modules/three-stdlib/controls/FlyControls.js b/node_modules/three-stdlib/controls/FlyControls.js
index 209c84f..25f82d6 100644
--- a/node_modules/three-stdlib/controls/FlyControls.js
+++ b/node_modules/three-stdlib/controls/FlyControls.js
@@ -178,7 +178,7 @@ class FlyControls extends EventDispatcher {
 
     _defineProperty(this, "mousedown", event => {
       if (this.dragToLook) {
-        this.mouseStatus++;
+        this.mouseStatus = 1;
       } else {
         switch (event.button) {
           case 0:
@@ -207,7 +207,7 @@ class FlyControls extends EventDispatcher {
 
     _defineProperty(this, "mouseup", event => {
       if (this.dragToLook) {
-        this.mouseStatus--;
+        this.mouseStatus = 0;
         this.moveState.yawLeft = this.moveState.pitchDown = 0;
       } else {
         switch (event.button) {
@@ -236,8 +236,9 @@ class FlyControls extends EventDispatcher {
       this.object.translateX(this.moveVector.x * moveMult);
       this.object.translateY(this.moveVector.y * moveMult);
       this.object.translateZ(this.moveVector.z * moveMult);
-      this.tmpQuaternion.set(this.rotationVector.x * rotMult, this.rotationVector.y * rotMult, this.rotationVector.z * rotMult, 1).normalize();
+      this.tmpQuaternion.set(this.rotationVector.x * rotMult, this.rotationVector.y * rotMult, 0, 1).normalize();
       this.object.quaternion.multiply(this.tmpQuaternion);
+	  this.object.quaternion.set(this.object.quaternion.x, this.object.quaternion.y, 0, this.object.quaternion.w);
 
       if (this.lastPosition.distanceToSquared(this.object.position) > this.EPS || 8 * (1 - this.lastQuaternion.dot(this.object.quaternion)) > this.EPS) {
         this.dispatchEvent(this.changeEvent);
@@ -256,14 +257,15 @@ class FlyControls extends EventDispatcher {
     _defineProperty(this, "updateRotationVector", () => {
       this.rotationVector.x = -this.moveState.pitchDown + this.moveState.pitchUp;
       this.rotationVector.y = -this.moveState.yawRight + this.moveState.yawLeft;
-      this.rotationVector.z = -this.moveState.rollRight + this.moveState.rollLeft;
+      //this.rotationVector.z = -this.moveState.rollRight + this.moveState.rollLeft;
     });
 
     _defineProperty(this, "getContainerDimensions", () => {
       if (this.domElement != document && !(this.domElement instanceof Document)) {
+		  const rectObject = this.domElement.getBoundingClientRect();
         return {
-          size: [this.domElement.offsetWidth, this.domElement.offsetHeight],
-          offset: [this.domElement.offsetLeft, this.domElement.offsetTop]
+          size: [rectObject.width, rectObject.height],
+          offset: [rectObject.x, rectObject.y]
         };
       } else {
         return {
@@ -278,6 +280,7 @@ class FlyControls extends EventDispatcher {
       this.domElement.removeEventListener('mousemove', this.mousemove);
       this.domElement.removeEventListener('mousedown', this.mousedown);
       this.domElement.removeEventListener('mouseup', this.mouseup);
+	  this.domElement.removeEventListener('mouseleave', this.mouseup);
       window.removeEventListener('keydown', this.keydown);
       window.removeEventListener('keyup', this.keyup);
     });
@@ -298,6 +301,7 @@ class FlyControls extends EventDispatcher {
     this.domElement.addEventListener('mousemove', this.mousemove);
     this.domElement.addEventListener('mousedown', this.mousedown);
     this.domElement.addEventListener('mouseup', this.mouseup);
+	this.domElement.addEventListener('mouseleave', this.mouseup);
     window.addEventListener('keydown', this.keydown);
     window.addEventListener('keyup', this.keyup);
     this.updateMovementVector();
